{"indice": 82, "title": "API testing using SuperTest | Hacker Noon", "url": "https://hackernoon.com/api-testing-using-supertest-1f830ce838f1", "text": "API testing using SuperTest | Hacker NoonStart WritingStart WritingReadDiscover (Sort By)Top StoriesTop WritersAll TopicsDaily ArchiveLive ReactionsSuperTagTechBriefNoonificationNewslettersRandom StoryTechAll Topics (Click Here)AIBlockchainCybersecurityData ScienceDecentralizationFinanceFuturismGamingMachine LearningMediaProgrammingEngineeringRoboticsVirtual RealitySoftwareAPIsArchitectureCCodingEngineeringJavaJavascriptNodeJSOpen SourcePHPProgrammingPythonReactRubySQLSwiftTop StoriesTop StoriesAll Top StoriesSTOP, Drop, and do NOT Sell Your NFTs Like a Noob10 Best Nintendo DS Games of All Time Ranked by SalesA Guide to Start Trading CryptocurrenciesTechnology That is Paving the Way for Heart HealthCould Bitcoin Actually Replace USD as The Prominent Global Currency?WriteWriterBefore Clicking SubmitSubmit a DraftWriting GuidesReach More PeopleYour Message, Your AdRepublishing GuideBacklinks GuidesEarn CryptoBrandSubmit a DraftWriting GuidesReach More PeopleWriting PromptsFull List of PromptsDecentralized Internet ContestStartups InterviewGaming Metaverse ContestAll about youDo you own a good company?Get feral when you answer to the greatest interview in historyShare your philosophyWhich tech trends excite you?Do you travel?Describe your life hacksDescribe your DIY projectWhat do you wish existed?LearnWeb DevelopmentBecome a Cloud Developer \ud83d\udd17300 Scholarships - School of Cloud Computing \ud83d\udd17Become A Fullstack Developer \ud83d\udd17Become Android Developer\ud83d\udd17Design PatternsFeynman TechniqueIn 30 DaysIn 6 MonthsLearning to CodeLearning to LearnLearning via GamesCybersecurity \ud83d\udd17LanguagesBlockchainC C# C++GoHTML & CSS\ud83d\udd17Javascript\ud83d\udd17PHPPython \ud83d\udd17Ruby on RailsSQL \ud83d\udd17In Partnership With UdacitySTARTUPSWestern WorldCaliforniaCentral EuropeCentral AmericaEastern EuropeMiddle AmericaNorthern EuropeSouthern EuropeWestern EuropeEastern WorldAfricaEast AsiaMiddle EastOceaniaSouth AsiaSoutheast AsiaTrending CitiesLagosLondonLos AngelesMexico CityNew York CityPuneSan FranciscoRed Wood CitySingaporeSydneyTel AvivZugTech GiantsA to FAdobeAlphabetAmazonApacheAppleATTBoACoinbaseComcastEbayFacebookFoxconnG to NGoogleHPHuaweiIBMIntelIntuitLenovoMcDonaldsMicrosoftNetAppNetflixNvidiaO to ZOraclePfizerSamsungSonyTeslaTexas InstrumentsTencent3mTwitterUberLearn MoreMore Tech CompaniesAboutCompanyContact UsAbout UsCareersPodcastJoin Community (and Comment)Full List of Social Media AccountsRegular Platform UpdatesPeopleCEOCOOMeet the TeamInvestorsExternal Tech ExpertsAnnual Noonies AwardsShareholder UpdatesSoftware by HackerNoonSloggingAnnual Startup AwardsRemove Paywalled Stories from Google SearchHacker Noon is a GIFMobile Application Coming SoonHelpWritersWe Give all the FAQsStory Rejected?Account SettingsHow to use our EditorContactVisitorsWhat the FAQ?Sign UpGetting StartedHow to Navigate our SiteContactSponsorPartnershipsMedia KitWrite as a Business or BrandSitewide Yellow BillboardNewsletterNiche MarketingBlog for the Corporate SoulReadDiscover (Sort By)Top StoriesTop WritersAll TopicsDaily ArchiveLive ReactionsSuperTagTechBriefNoonificationNewslettersRandom StoryTechAll Topics (Click Here)AIBlockchainCybersecurityData ScienceDecentralizationFinanceFuturismGamingMachine LearningMediaProgrammingEngineeringRoboticsVirtual RealitySoftwareAPIsArchitectureCCodingEngineeringJavaJavascriptNodeJSOpen SourcePHPProgrammingPythonReactRubySQLSwiftTop StoriesTop StoriesAll Top StoriesSTOP, Drop, and do NOT Sell Your NFTs Like a Noob10 Best Nintendo DS Games of All Time Ranked by SalesA Guide to Start Trading CryptocurrenciesTechnology That is Paving the Way for Heart HealthCould Bitcoin Actually Replace USD as The Prominent Global Currency?WriteWriterBefore Clicking SubmitSubmit a DraftWriting GuidesReach More PeopleYour Message, Your AdRepublishing GuideBacklinks GuidesEarn CryptoBrandSubmit a DraftWriting GuidesReach More PeopleWriting PromptsFull List of PromptsDecentralized Internet ContestStartups InterviewGaming Metaverse ContestAll about youDo you own a good company?Get feral when you answer to the greatest interview in historyShare your philosophyWhich tech trends excite you?Do you travel?Describe your life hacksDescribe your DIY projectWhat do you wish existed?LearnWeb DevelopmentBecome a Cloud Developer \ud83d\udd17300 Scholarships - School of Cloud Computing \ud83d\udd17Become A Fullstack Developer \ud83d\udd17Become Android Developer\ud83d\udd17Design PatternsFeynman TechniqueIn 30 DaysIn 6 MonthsLearning to CodeLearning to LearnLearning via GamesCybersecurity \ud83d\udd17LanguagesBlockchainC C# C++GoHTML & CSS\ud83d\udd17Javascript\ud83d\udd17PHPPython \ud83d\udd17Ruby on RailsSQL \ud83d\udd17In Partnership With UdacitySTARTUPSWestern WorldCaliforniaCentral EuropeCentral AmericaEastern EuropeMiddle AmericaNorthern EuropeSouthern EuropeWestern EuropeEastern WorldAfricaEast AsiaMiddle EastOceaniaSouth AsiaSoutheast AsiaTrending CitiesLagosLondonLos AngelesMexico CityNew York CityPuneSan FranciscoRed Wood CitySingaporeSydneyTel AvivZugTech GiantsA to FAdobeAlphabetAmazonApacheAppleATTBoACoinbaseComcastEbayFacebookFoxconnG to NGoogleHPHuaweiIBMIntelIntuitLenovoMcDonaldsMicrosoftNetAppNetflixNvidiaO to ZOraclePfizerSamsungSonyTeslaTexas InstrumentsTencent3mTwitterUberLearn MoreMore Tech CompaniesAboutCompanyContact UsAbout UsCareersPodcastJoin Community (and Comment)Full List of Social Media AccountsRegular Platform UpdatesPeopleCEOCOOMeet the TeamInvestorsExternal Tech ExpertsAnnual Noonies AwardsShareholder UpdatesSoftware by HackerNoonSloggingAnnual Startup AwardsRemove Paywalled Stories from Google SearchHacker Noon is a GIFMobile Application Coming SoonHelpWritersWe Give all the FAQsStory Rejected?Account SettingsHow to use our EditorContactVisitorsWhat the FAQ?Sign UpGetting StartedHow to Navigate our SiteContactSponsorPartnershipsMedia KitWrite as a Business or BrandSitewide Yellow BillboardNewsletterNiche MarketingBlog for the Corporate SoulBuild with Interactive Live VideoAPI testing using SuperTest\u2002by@xperia.chamaraAPI testing using SuperTestOriginally published by Chamara Madhushan Liyanage on\u00a0March 31st 2018  70,954 reads SuperTest library can be used to test endpoints using Node + express. This article is not focusing on crating a rest API using express framework. Instead we create a simple API using node + express to test our API. The first API test is to test the http://localhost:3000:3000/users endpoint. If this endpoint works correctly it should return status code 200. We simply specify the first argument as first argument from the first test case. Here is how we write the test for this route in out of out apiTest.js.@xperia.chamaraChamara Madhushan LiyanageSoftware engineerWonder how to write tests for you API. Well you can use SuperTest which is can be used to test HTTP endpoints.Before starting SuperTest let\u2019s create a simple API using node + express. In express let\u2019s use the the route given to us by them in order to learn SuperTest library. This article is not focusing on crating a rest API using express framework.Let\u2019s go to the /routes/users.js file and create some endpoints.var express = require('express');var router = express.Router();/** * get all users */router.get('/', function (req, res, next) {    return res.json('all users sent');});/** * Get a specific user */router.get('/:id', function (req, res, next) {    if (req.params.id === 'U001') { // just to demo        return res.json(\"user U001 found\");    }    return res.status(404).json('user not found');});/** * Add a user */router.post('/', function (req, res, next) {    let content = req.body;    if (content.id) { //just to demo        return res.status(201).json(\"user created\");    }    return res.status(400).json('user not created');});module.exports = router;I\u2019ve crated two simple get methods to fetch user data and a post method to save a user. LOL, I was kidding there\u2019s no actual database integration or save functionality just sending some JSON outputs based on some dummy logic \ud83d\ude39 and status codes to test our API. You can create a real working API. But remember to send relevant HTTP status codes so it\u2019s easy when writing unit tests later.Now let\u2019s focus on writing API tests using SuperTest. First you need to install the dependency as a devDependancy.npm install supertest --save-devThis will include mocha as well because super test use mocha test framework. But you don\u2019t need to install it it comes with supertest.Then lets create a directory called test in the root level of the project and create a file called apiTest.js. This file is the file where we write the API tests.First thing we need is the supertest module.//apiTest.jsconst request = require('supertest');Then we need to pass the http.Server to the request() method of supertest. To do that let\u2019s include our express app as follows.//apiTest.jsconst request = require('supertest');const app = require('../app'); //reference to you app.js fileThe let\u2019s write the first API test to test the http://localhost:3000/users endpoint\u00a0. If this endpoint works correctly it should return status code 200. That\u2019s how the user route file is implemented\u00a0. See the following code res.json() will automatically set the status code 200. So no worries.//from users.js route file/** * get all users */router.get('/', function (req, res, next) {    return res.json('all users sent');});Ok, how we write the test for this route in out apiTest.js using supertest.//apiTest.jsconst request = require('supertest');const app = require('../app');//==================== user API test ====================/** * Testing get all user endpoint */describe('GET /users', function () {    it('respond with json containing a list of all users', function (done) {        request(app)            .get('/users')            .set('Accept', 'application/json')            .expect('Content-Type', /json/)            .expect(200, done);    });});Here describe method is coming from mocha test framework. We simply specify the endpoint name as the first argument and then the function to write the test case. Here Mocha describe() is for grouping the test cases while it() is used to write the real test cases. We give a simple description of what we are going to test as the first argument in it() function. Then the callback function to be called.request() needs the HTTP.server so we pass our express app reference. Then in get() we specify the route endpoint. Here we are in the app so can omit http://localhost:3000/ part. Just give the route endpoint.in set() we set the HTTP header attributes. Then in expect() we check for the return values including Header values and body values.In this example we check whether the returned content type is JSON. Because we send the response as JSON using res.json() method. Then expect(200) is to check the returned status code is equal to 200. Then we end the test by calling done our callback function.Right so far so good. But how can we run this tests. Well you have to use make this change in your package.json file.\"scripts\": {  \"start\": \"node ./bin/www\",  \"test\": \"mocha 'test/apiTest.js'\" //path to your test file}Now you can run the test cases by simply using> npm testAfter running the test file you\u2019ll see this output.> mocha 'test/apiTest.js'GET /usersGET /users 200 5.289 ms - 16    \u2713 respond with json containing a list of all users1 passing (38ms)Let\u2019s continue writing more test cases of all the endpoints in the users.js file.const request = require('supertest');const app = require('../app');//==================== user API test ====================/** * Testing get all user endpoint */describe('GET /users', function () {    it('respond with json containing a list of all users', function (done) {        request(app)            .get('/users')            .set('Accept', 'application/json')            .expect('Content-Type', /json/)            .expect(200, done);    });});/** * Testing get a user endpoint by giving an existing user */describe('GET /user/:id', function () {    it('respond with json containing a single user', function (done) {        request(app)            .get('/users/U001')            .set('Accept', 'application/json')            .expect('Content-Type', /json/)            .expect(200, done);    });});/** * Testing get a user endpoint by giving a non-existing user */describe('GET /user/:id', function () {    it('respond with json user not found', function (done) {        request(app)            .get('/users/idisnonexisting')            .set('Accept', 'application/json')            .expect('Content-Type', /json/)            .expect(404) //expecting HTTP status code            .expect('\"user not found\"') // expecting content value            .end((err) => {                if (err) return done(err);                done();            });    });});/** * Testing post user endpoint */describe('POST /users', function () {    let data = {        \"id\": \"1\",        \"name\": \"dummy\",        \"contact\": \"dummy\",        \"address\": \"dummy\"    }    it('respond with 201 created', function (done) {        request(app)            .post('/users')            .send(data)            .set('Accept', 'application/json')            .expect('Content-Type', /json/)            .expect(201)            .end((err) => {                if (err) return done(err);                done();            });    });});/** * Testing post user endpoint */describe('POST /users', function () {    let data = {        //no id        \"name\": \"dummy\",        \"contact\": \"dummy\",        \"address\": \"dummy\"    }    it('respond with 400 not created', function (done) {        request(app)            .post('/users')            .send(data)            .set('Accept', 'application/json')            .expect('Content-Type', /json/)            .expect(400)            .expect('\"user not created\"')            .end((err) => {                if (err) return done(err);                done();            });    });});If you look closely at the code in apiTest.js file you\u2019ll get the rhythm. I\u2019ve only showed GET and POST methods but you can try PUT and DELETE methods with real working API.If you run this test file using npm test command finally you\u2019ll see an output like this.> mocha 'test/apiTest.js'GET /usersGET /users 200 5.610 ms - 16    \u2713 respond with json containing a list of all usersGET /user/:idGET /users/U001 200 0.870 ms - 17    \u2713 respond with json containing a single userGET /user/:idGET /users/idisnonexisting 404 0.458 ms - 16    \u2713 respond with json user not foundPOST /usersPOST /users 201 10.196 ms - 14    \u2713 respond with 201 createdPOST /usersPOST /users 400 0.607 ms - 18    \u2713 respond with 400 not created5 passing (62ms)Better to refer https://github.com/visionmedia/supertest for more knowledge.by Chamara Madhushan Liyanage @xperia.chamara. Software engineerRead my storiesAutomate Security Across All Your Cloud EnvironmentsRelated StoriesSubject MatterWrite Function Overloads using JSDoc and TypeScript by  @austingil   #javascript  Implementing the Weighted Random Algorithm with JavaScript by  @trekhleb   #javascript  Go Serverless with AWS Lambda, Node.js and Dashbird by  @taavi-rehemagi   #nodejs  How to Use ShellJS to Combine Bash Shell Commands and Javascript by  @iannguyen   #shelljs  Data Visualization for Dummies: 3 Simple Charts with <70 Lines of Code by  @maksymmostovyi   #data-visualization  Tags#nodejs#supertest#rest-api-testing#javascript#mochaJoin Hacker Noon Create your free account to unlock your custom reading experience.ABOUTCareersContactCookiesHelpPrivacyTermsREADArchiveLeaderboardReviewsSignupTech TagsTop StoriesWRITEDistributionEditor TipsGuidelinesNew StoryPerksWhy WriteSPONSORBrand PublishingCase StudiesNiche MarketingNewsletterSitewide BillboardWriting ContestsThe Hacker Noon NewsletterQuality Weekly Reads About Technology Infiltrating EverythingSubscribefree Yes, I agree to receive emails about tech eating the world.", "encoding": "utf-8"}